# Define a versão da sintaxe do Docker Compose
version: '3.8'

services:
  # Serviço NGINX: Servidor HTTP reverso que serve os arquivos da aplicação
  server:
    # Imagem poderia ser usada diretamente, mas aqui usamos um Dockerfile customizado
    # image: 'nginx:stable-alpine'
    build:
      context: .                             # Contexto de build: raiz do projeto
      dockerfile: dockerfiles/nginx.dockerfile  # Dockerfile personalizado do NGINX
    ports:
      - '8000:80'                            # Mapeia porta 8000 do host para a 80 do container
    volumes:
      - ./src:/var/www/html                 # Monta o código-fonte no diretório servido pelo NGINX
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro  # Monta o arquivo de config do NGINX (read-only)
    depends_on:
      - php                                 # Garante que o container php seja iniciado antes
      - mysql                               # Garante que o banco MySQL também esteja pronto

  # Serviço PHP-FPM: Executa o código Laravel
  php:
    build:
      context: .                             # Mesmo contexto da raiz do projeto
      dockerfile: dockerfiles/php.dockerfile # Dockerfile específico para o PHP-FPM
    volumes:
      - ./src:/var/www/html:delegated       # Código-fonte da aplicação (com flag "delegated" para otimizar em WSL/macOS)

  # Serviço MySQL: Banco de dados relacional
  mysql:
    image: mysql:5.7                         # Usa imagem oficial do MySQL na versão 5.7
    env_file:
      - ./env/mysql.env                     # Carrega variáveis de ambiente do banco (usuário, senha, etc.)

  # Serviço Composer: Utilitário para instalar dependências do Laravel
  composer:
    build:
      context: ./dockerfiles                # Build feito com contexto limitado só à pasta dockerfiles
      dockerfile: composer.dockerfile       # Dockerfile personalizado do Composer
    volumes:
      - ./src:/var/www/html                # Permite ao Composer instalar diretamente no código-fonte

  # Serviço Artisan: Comando para executar o CLI do Laravel
  artisan:
    build:
      context: .                             # Usa mesmo Dockerfile do PHP
      dockerfile: dockerfiles/php.dockerfile
    volumes:
      - ./src:/var/www/html
    entrypoint: ['php', '/var/www/html/artisan']  # Sobrescreve o comando padrão e executa diretamente o Artisan

  # Serviço npm: Utilitário para dependências JavaScript (ex: Vue, Tailwind, etc.)
  npm:
    image: node:14                           # Usa imagem oficial do Node.js v14
    working_dir: /var/www/html               # Define diretório de trabalho
    entrypoint: ['npm']                      # Define npm como comando padrão (ex: install, run dev)
    volumes:
      - ./src:/var/www/html                 # Acesso ao código-fonte para rodar npm install ou build
